import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/lib/Graph.svelte");/* src/lib/Graph.svelte generated by Svelte v4.2.8 */
import {
	SvelteComponentDev,
	add_location,
	attr_dev,
	check_outros,
	children,
	claim_component,
	claim_space,
	claim_svg_element,
	create_component,
	destroy_component,
	detach_dev,
	dispatch_dev,
	empty,
	ensure_array_like_dev,
	globals,
	group_outros,
	init,
	insert_hydration_dev,
	mount_component,
	outro_and_destroy_block,
	safe_not_equal,
	space,
	svg_element,
	transition_in,
	transition_out,
	update_keyed_each,
	validate_each_keys,
	validate_slots
} from "/node_modules/.vite/deps/svelte_internal.js?v=8b273cb8";

const { Map: Map_1, Object: Object_1 } = globals;
import "/node_modules/.vite/deps/svelte_internal_disclose-version.js?v=8b273cb8";
import __vite__cjsImport2_elkjs from "/node_modules/.vite/deps/elkjs.js?v=8b273cb8"; const ELK = __vite__cjsImport2_elkjs.__esModule ? __vite__cjsImport2_elkjs.default : __vite__cjsImport2_elkjs;
import { onMount, tick } from "/node_modules/.vite/deps/svelte.js?v=8b273cb8";
import State from "/src/lib/State.svelte?t=1702676564221";
import Edge from "/src/lib/Edge.svelte?t=1702667462145";
import Transition from "/src/lib/Transition.svelte?t=1702667494705";
const file = "src/lib/Graph.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i][0];
	child_ctx[14] = list[i][1];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i][0];
	child_ctx[14] = list[i][1];
	child_ctx[18] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i][0];
	child_ctx[19] = list[i][1];
	return child_ctx;
}

// (223:0) {#each Object.entries(nodes) as [id, node] (id)}
function create_each_block_2(key_1, ctx) {
	let first;
	let state;
	let current;

	state = new State({
			props: {
				node: /*node*/ ctx[19],
				previewIds: /*previewIds*/ ctx[4],
				activeIds: /*activeIds*/ ctx[3]
			},
			$$inline: true
		});

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			first = empty();
			create_component(state.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			first = empty();
			claim_component(state.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			this.first = first;
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, first, anchor);
			mount_component(state, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const state_changes = {};
			if (dirty & /*nodes*/ 2) state_changes.node = /*node*/ ctx[19];
			if (dirty & /*previewIds*/ 16) state_changes.previewIds = /*previewIds*/ ctx[4];
			if (dirty & /*activeIds*/ 8) state_changes.activeIds = /*activeIds*/ ctx[3];
			state.$set(state_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(state.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(state.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(first);
			}

			destroy_component(state, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(223:0) {#each Object.entries(nodes) as [id, node] (id)}",
		ctx
	});

	return block;
}

// (227:2) {#each Object.entries(edges) as [id, edge], order (id)}
function create_each_block_1(key_1, ctx) {
	let first;
	let edge_1;
	let current;

	edge_1 = new Edge({
			props: {
				edge: /*edge*/ ctx[14],
				nodes: /*nodes*/ ctx[1],
				activeIds: /*activeIds*/ ctx[3],
				order: /*order*/ ctx[18]
			},
			$$inline: true
		});

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			first = empty();
			create_component(edge_1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			first = empty();
			claim_component(edge_1.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			this.first = first;
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, first, anchor);
			mount_component(edge_1, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const edge_1_changes = {};
			if (dirty & /*edges*/ 1) edge_1_changes.edge = /*edge*/ ctx[14];
			if (dirty & /*nodes*/ 2) edge_1_changes.nodes = /*nodes*/ ctx[1];
			if (dirty & /*activeIds*/ 8) edge_1_changes.activeIds = /*activeIds*/ ctx[3];
			if (dirty & /*edges*/ 1) edge_1_changes.order = /*order*/ ctx[18];
			edge_1.$set(edge_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(edge_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(edge_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(first);
			}

			destroy_component(edge_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(227:2) {#each Object.entries(edges) as [id, edge], order (id)}",
		ctx
	});

	return block;
}

// (231:0) {#each Object.entries(edges) as [id, edge] (id)}
function create_each_block(key_1, ctx) {
	let first;
	let transition;
	let current;

	transition = new Transition({
			props: {
				edge: /*edge*/ ctx[14],
				activeIds: /*activeIds*/ ctx[3],
				actor: /*actor*/ ctx[2]
			},
			$$inline: true
		});

	const block = {
		key: key_1,
		first: null,
		c: function create() {
			first = empty();
			create_component(transition.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			first = empty();
			claim_component(transition.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			this.first = first;
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, first, anchor);
			mount_component(transition, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const transition_changes = {};
			if (dirty & /*edges*/ 1) transition_changes.edge = /*edge*/ ctx[14];
			if (dirty & /*activeIds*/ 8) transition_changes.activeIds = /*activeIds*/ ctx[3];
			if (dirty & /*actor*/ 4) transition_changes.actor = /*actor*/ ctx[2];
			transition.$set(transition_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(transition.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(transition.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(first);
			}

			destroy_component(transition, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(231:0) {#each Object.entries(edges) as [id, edge] (id)}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let each_blocks_2 = [];
	let each0_lookup = new Map_1();
	let t0;
	let svg;
	let each_blocks_1 = [];
	let each1_lookup = new Map_1();
	let t1;
	let each_blocks = [];
	let each2_lookup = new Map_1();
	let each2_anchor;
	let current;
	let each_value_2 = ensure_array_like_dev(Object.entries(/*nodes*/ ctx[1]));
	const get_key = ctx => /*id*/ ctx[13];
	validate_each_keys(ctx, each_value_2, get_each_context_2, get_key);

	for (let i = 0; i < each_value_2.length; i += 1) {
		let child_ctx = get_each_context_2(ctx, each_value_2, i);
		let key = get_key(child_ctx);
		each0_lookup.set(key, each_blocks_2[i] = create_each_block_2(key, child_ctx));
	}

	let each_value_1 = ensure_array_like_dev(Object.entries(/*edges*/ ctx[0]));
	const get_key_1 = ctx => /*id*/ ctx[13];
	validate_each_keys(ctx, each_value_1, get_each_context_1, get_key_1);

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1(ctx, each_value_1, i);
		let key = get_key_1(child_ctx);
		each1_lookup.set(key, each_blocks_1[i] = create_each_block_1(key, child_ctx));
	}

	let each_value = ensure_array_like_dev(Object.entries(/*edges*/ ctx[0]));
	const get_key_2 = ctx => /*id*/ ctx[13];
	validate_each_keys(ctx, each_value, get_each_context, get_key_2);

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key_2(child_ctx);
		each2_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t0 = space();
			svg = svg_element("svg");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each2_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].l(nodes);
			}

			t0 = claim_space(nodes);
			svg = claim_svg_element(nodes, "svg", { class: true });
			var svg_nodes = children(svg);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(svg_nodes);
			}

			svg_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each2_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(svg, "class", "pointer-events-none fixed left-0 top-0 h-screen w-screen overflow-visible");
			add_location(svg, file, 257, 0, 7182);
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks_2.length; i += 1) {
				if (each_blocks_2[i]) {
					each_blocks_2[i].m(target, anchor);
				}
			}

			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, svg, anchor);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				if (each_blocks_1[i]) {
					each_blocks_1[i].m(svg, null);
				}
			}

			insert_hydration_dev(target, t1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(target, anchor);
				}
			}

			insert_hydration_dev(target, each2_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*Object, nodes, previewIds, activeIds*/ 26) {
				each_value_2 = ensure_array_like_dev(Object.entries(/*nodes*/ ctx[1]));
				group_outros();
				validate_each_keys(ctx, each_value_2, get_each_context_2, get_key);
				each_blocks_2 = update_keyed_each(each_blocks_2, dirty, get_key, 1, ctx, each_value_2, each0_lookup, t0.parentNode, outro_and_destroy_block, create_each_block_2, t0, get_each_context_2);
				check_outros();
			}

			if (dirty & /*Object, edges, nodes, activeIds*/ 11) {
				each_value_1 = ensure_array_like_dev(Object.entries(/*edges*/ ctx[0]));
				group_outros();
				validate_each_keys(ctx, each_value_1, get_each_context_1, get_key_1);
				each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key_1, 1, ctx, each_value_1, each1_lookup, svg, outro_and_destroy_block, create_each_block_1, null, get_each_context_1);
				check_outros();
			}

			if (dirty & /*Object, edges, activeIds, actor*/ 13) {
				each_value = ensure_array_like_dev(Object.entries(/*edges*/ ctx[0]));
				group_outros();
				validate_each_keys(ctx, each_value, get_each_context, get_key_2);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key_2, 1, ctx, each_value, each2_lookup, each2_anchor.parentNode, outro_and_destroy_block, create_each_block, each2_anchor, get_each_context);
				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_2.length; i += 1) {
				transition_in(each_blocks_2[i]);
			}

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks_1[i]);
			}

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < each_blocks_2.length; i += 1) {
				transition_out(each_blocks_2[i]);
			}

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				transition_out(each_blocks_1[i]);
			}

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) {
				detach_dev(t0);
				detach_dev(svg);
				detach_dev(t1);
				detach_dev(each2_anchor);
			}

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].d(detaching);
			}

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].d();
			}

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function flatten(array) {
	return [].concat(...array);
}

function getChildren(stateNode) {
	if (!stateNode.states) return [];
	const children = Object.keys(stateNode.states).map(key => stateNode.states[key]);
	children.sort((a, b) => b.order - a.order);
	return children;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Graph', slots, []);
	let { actor } = $$props;
	let { edges = {} } = $$props;
	let { nodes = {} } = $$props;
	let { digraph } = $$props;
	const elk = new ELK({ defaultLayoutOptions: {} });

	function getElkChild(node, rMap) {
		const layout = nodes[node.id].meta.layout;
		const edges2 = rMap[0].get(node.stateNode) || [];

		return {
			id: node.id,
			// Устанавливаем ширину и высоту узла, если у него нет детей
			...node.children.length
			? void 0
			: {
					width: layout.width,
					height: layout.height
				},
			children: node.children.map(childNode => getElkChild(childNode, rMap)),
			edges: edges2.map(getElkEdge),
			layoutOptions: {
				"elk.padding": `[top=${(layout.height || 0) + 30}, left=30, right=30, bottom=30]`,
				// Добавляем отступы вокруг узла
				hierarchyHandling: "INCLUDE_CHILDREN"
			}, // Включаем дочерние узлы в иерархию
			node
		}; // Сохраняем ссылку на исходный узел
		// absolutePosition: { x: 0, y: 0 }, Задаем начальную абсолютную позицию узла (относительно родителя)
	}

	const getElkEdge = edge => ({
		id: edge.id,
		// Устанавливаем источник и цель дуги
		sources: [edge.source],
		targets: [edge.target],
		// Добавляем метку на дугу с параметрами разметки
		labels: [
			{
				id: edge.id + "--label",
				// Уникальный ID метки
				width: edges[edge.id].label.width,
				// Ширина метки
				height: edges[edge.id].label.height,
				// Высота метки
				text: edge.label.text || "always",
				// Текст метки
				layoutOptions: {
					"edgeLabels.inline": "true",
					// встроенная метка
					"edgeLabels.placement": "CENTER"
				}, // расположение по центру
				
			}
		],
		edge,
		// Сохраняем ссылку на исходную дугу
		sections: []
	}); // Пока не задаем секции дуги (могут быть добавлены позже)

	function getRelativeNodeEdgeMap() {
		const map = /* @__PURE__ */
		new Map();

		const edgeMap = /* @__PURE__ */
		new Map();

		const getLCA = (source, target) => {
			if (source === target) return source.parent;

			const set = /* @__PURE__ */
			new Set();

			let node = source.parent;

			while (node) {
				set.add(node);
				node = node.parent;
			}

			node = target;

			while (node) {
				if (set.has(node)) return node;
				node = node.parent;
			}

			return source.machine;
		};

		Object.values(edges).forEach(edge => {
			const lca = getLCA(nodes[edge.source], nodes[edge.target]);
			if (!map.has(lca)) map.set(lca, []);
			map.get(lca).push(edge);
			edgeMap.set(edge.id, lca);
		});

		return [map, edgeMap];
	}

	async function getElkGraph(digraph2) {
		const rMap = getRelativeNodeEdgeMap();
		const rootEdges = rMap[0].get(void 0) || [];

		const elkNode = {
			id: "root",
			edges: rootEdges.map(getElkEdge),
			children: [getElkChild(digraph2, rMap)],
			layoutOptions: {
				"elk.hierarchyHandling": "INCLUDE_CHILDREN",
				"elk.algorithm": "layered",
				"elk.layered.crossingMinimization.semiInteractive": "true"
			}
		};

		const layoutElkNode = await elk.layout(elkNode);
		const stateNodeToElkNodeMap = /* @__PURE__ */ new Map();

		const setEdgeLayout = edge => {
			const lca = rMap[1].get(edge.id);
			const elkLca = lca && stateNodeToElkNodeMap.get(lca);
			$$invalidate(0, edges[edge.id].label.x = elkLca?.x || 0, edges);
			$$invalidate(0, edges[edge.id].label.y = elkLca?.y || 0, edges);

			if (edge.sections) {
				const translatedSections = elkLca
				? edge.sections.map(section => ({
						...section,
						startPoint: {
							x: section.startPoint.x + elkLca.absolutePosition.x,
							y: section.startPoint.y + elkLca.absolutePosition.y
						},
						endPoint: {
							x: section.endPoint.x + elkLca.absolutePosition.x,
							y: section.endPoint.y + elkLca.absolutePosition.y
						},
						bendPoints: section.bendPoints?.map(bendPoint => {
							return {
								x: bendPoint.x + elkLca.absolutePosition.x,
								y: bendPoint.y + elkLca.absolutePosition.y
							};
						})
					}))
				: edge.sections;

				if (translatedSections) edge.edge.sections = translatedSections;
			}

			edge.edge.label.x = (edge.labels?.[0].x || 0) + (elkLca?.absolutePosition.x || 0);
			edge.edge.label.y = (edge.labels?.[0].y || 0) + (elkLca?.absolutePosition.y || 0);
		};

		const setLayout = (elkNode2, parent) => {
			stateNodeToElkNodeMap.set(elkNode2.node.stateNode, elkNode2);

			elkNode2.absolutePosition = {
				x: (parent?.absolutePosition.x ?? 0) + elkNode2.x,
				y: (parent?.absolutePosition.y ?? 0) + elkNode2.y
			};

			elkNode2.node.stateNode.meta = {
				layout: {
					width: elkNode2.width,
					height: elkNode2.height,
					x: elkNode2.x,
					y: elkNode2.y
				}
			};

			$$invalidate(
				1,
				nodes[elkNode2.id].meta = {
					layout: {
						width: elkNode2.width,
						height: elkNode2.height,
						x: (parent?.absolutePosition.x ?? 0) + elkNode2.x,
						y: (parent?.absolutePosition.y ?? 0) + elkNode2.y
					}
				},
				nodes
			);

			elkNode2.edges?.forEach(edge => {
				setEdgeLayout(edge);
			});

			elkNode2.children?.forEach(cn => {
				setLayout(cn, elkNode2);
			});
		};

		layoutElkNode.edges?.forEach(setEdgeLayout);
		setLayout(layoutElkNode.children[0], void 0);
		return layoutElkNode.children[0];
	}

	function toDirectedGraph(stateNode) {
		const egs = flatten(stateNode.transitions.map((t, transitionIndex) => {
			const targets = t.target ? t.target : [stateNode];

			return targets.map((target, targetIndex) => {
				const edge = {
					id: `${stateNode.id}:${transitionIndex}:${targetIndex}`,
					source: stateNode.id,
					target: target.id,
					transition: t,
					sections: [],
					label: {
						text: t.eventType,
						x: 0,
						y: 0,
						width: 0,
						height: 0
					}
				};

				return edge;
			});
		}));

		const graph = {
			id: stateNode.id,
			stateNode,
			children: getChildren(stateNode).map(toDirectedGraph),
			edges: egs
		};

		$$invalidate(1, nodes[graph.id] = graph.stateNode, nodes);
		return graph;
	}

	onMount(async () => {
		const machine = actor.getSnapshot().context.machine;
		let d = toDirectedGraph(machine);
		await tick();
		const elkg = await getElkGraph(d);
	});

	let activeIds = actor.getSnapshot().context.state.configuration.map(i => i.id);
	let previewIds = [];

	onMount(() => {
		const { unsubscribe } = actor.subscribe(state => {
			if (state.changed) {
				$$invalidate(4, previewIds = state.context.previewEvent
				? state.context.machine.transition(state.context.state, { type: state.context.previewEvent }).configuration.map(i => i.id)
				: []);

				$$invalidate(3, activeIds = state.context.state.configuration.map(i => i.id));
			}
		});

		return () => {
			unsubscribe();
		};
	});

	$$self.$$.on_mount.push(function () {
		if (actor === undefined && !('actor' in $$props || $$self.$$.bound[$$self.$$.props['actor']])) {
			console.warn("<Graph> was created without expected prop 'actor'");
		}

		if (digraph === undefined && !('digraph' in $$props || $$self.$$.bound[$$self.$$.props['digraph']])) {
			console.warn("<Graph> was created without expected prop 'digraph'");
		}
	});

	const writable_props = ['actor', 'edges', 'nodes', 'digraph'];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Graph> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('actor' in $$props) $$invalidate(2, actor = $$props.actor);
		if ('edges' in $$props) $$invalidate(0, edges = $$props.edges);
		if ('nodes' in $$props) $$invalidate(1, nodes = $$props.nodes);
		if ('digraph' in $$props) $$invalidate(5, digraph = $$props.digraph);
	};

	$$self.$capture_state = () => ({
		ELK,
		onMount,
		tick,
		State,
		Edge,
		Transition,
		actor,
		edges,
		nodes,
		digraph,
		elk,
		getElkChild,
		getElkEdge,
		getRelativeNodeEdgeMap,
		getElkGraph,
		flatten,
		getChildren,
		toDirectedGraph,
		activeIds,
		previewIds
	});

	$$self.$inject_state = $$props => {
		if ('actor' in $$props) $$invalidate(2, actor = $$props.actor);
		if ('edges' in $$props) $$invalidate(0, edges = $$props.edges);
		if ('nodes' in $$props) $$invalidate(1, nodes = $$props.nodes);
		if ('digraph' in $$props) $$invalidate(5, digraph = $$props.digraph);
		if ('activeIds' in $$props) $$invalidate(3, activeIds = $$props.activeIds);
		if ('previewIds' in $$props) $$invalidate(4, previewIds = $$props.previewIds);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [edges, nodes, actor, activeIds, previewIds, digraph, flatten];
}

class Graph extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			actor: 2,
			edges: 0,
			nodes: 1,
			digraph: 5,
			flatten: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Graph",
			options,
			id: create_fragment.name
		});
	}

	get actor() {
		throw new Error("<Graph>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set actor(value) {
		throw new Error("<Graph>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get edges() {
		throw new Error("<Graph>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set edges(value) {
		throw new Error("<Graph>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get nodes() {
		throw new Error("<Graph>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set nodes(value) {
		throw new Error("<Graph>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get digraph() {
		throw new Error("<Graph>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set digraph(value) {
		throw new Error("<Graph>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get flatten() {
		return flatten;
	}

	set flatten(value) {
		throw new Error("<Graph>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

import * as ___SVELTE_HMR_HOT_API from "/@fs/home/zavx0z/botswork/node_modules/svelte-hmr/runtime/hot-api-esm.js?v=8b273cb8";import { adapter as ___SVELTE_HMR_HOT_API_PROXY_ADAPTER } from "/@fs/home/zavx0z/botswork/node_modules/svelte-hmr/runtime/proxy-adapter-dom.js?v=8b273cb8";if (import.meta && import.meta.hot) { if (false) import.meta.hot.acceptExports(['default']);; Graph = ___SVELTE_HMR_HOT_API.applyHmr({ m: import.meta, id: "/home/zavx0z/botswork/lib/viz/src/lib/Graph.svelte", hotOptions: {"preserveLocalState":false,"noPreserveStateKey":["@hmr:reset","@!hmr"],"preserveAllLocalStateKey":"@hmr:keep-all","preserveLocalStateKey":"@hmr:keep","noReload":false,"optimistic":false,"acceptNamedExports":true,"acceptAccessors":true,"injectCss":false,"cssEjectDelay":100,"native":false,"importAdapterName":"___SVELTE_HMR_HOT_API_PROXY_ADAPTER","noOverlay":true,"allowLiveBinding":false,"partialAccept":true}, Component: Graph, ProxyAdapter: ___SVELTE_HMR_HOT_API_PROXY_ADAPTER, acceptable: true, preserveLocalState: false, emitCss: true, }); }
export default Graph;


//# sourceMappingURL=data:application/json;base64,