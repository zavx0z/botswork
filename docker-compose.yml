version: "3.9"

services:
  auth:
    container_name: sso
    build:
      context: ./apps/server/sso
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
    ports:
      - ${SSO_PORT}:${SSO_PORT}
    depends_on:
      - db
    restart: always
    entrypoint: [ "uvicorn", "server_sso.main:app", "--host", "${SSO_HOST}", "--port", "${SSO_PORT}" ]
    networks:
      net:
        aliases:
          - ${SSO_HOST}
  db:
    container_name: db
    image: postgres:alpine
    volumes:
      - db:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    restart: always
    networks:
      net:
        aliases:
          - ${POSTGRES_HOST}
  redis:
    container_name: redis
    image: redis:alpine
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    restart: always
    networks:
      net:
        aliases:
          - ${REDIS_HOST}
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana:/var/lib/grafana
    networks:
      net:
        aliases:
          - grafana

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      net:
        aliases:
          - prometheus
volumes:
  prometheus:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${STORE_DIR}/prometheus
  grafana:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${STORE_DIR}/grafana
  db:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${STORE_DIR}/db

networks:
  net:
    driver: bridge
